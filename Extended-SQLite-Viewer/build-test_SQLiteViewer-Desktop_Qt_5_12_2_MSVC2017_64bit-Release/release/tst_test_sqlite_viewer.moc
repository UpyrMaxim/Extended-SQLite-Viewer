/****************************************************************************
** Meta object code from reading C++ file 'tst_test_sqlite_viewer.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.12.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_test_sqlite_viewer.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.12.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_test_sqlite_viewer_t {
    QByteArrayData data[18];
    char stringdata0[548];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_test_sqlite_viewer_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_test_sqlite_viewer_t qt_meta_stringdata_test_sqlite_viewer = {
    {
QT_MOC_LITERAL(0, 0, 18), // "test_sqlite_viewer"
QT_MOC_LITERAL(1, 19, 12), // "initTestCase"
QT_MOC_LITERAL(2, 32, 0), // ""
QT_MOC_LITERAL(3, 33, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 49, 43), // "test_qhexconvertor_rawdatatab..."
QT_MOC_LITERAL(5, 93, 28), // "test_rawdatatable_headerData"
QT_MOC_LITERAL(6, 122, 38), // "test_rawdatatable_headerData_..."
QT_MOC_LITERAL(7, 161, 26), // "test_rawdatatable_get_type"
QT_MOC_LITERAL(8, 188, 42), // "test_rawdatatable_get_type_wr..."
QT_MOC_LITERAL(9, 231, 32), // "test_rawdatatable_get_type_empty"
QT_MOC_LITERAL(10, 264, 33), // "test_qhexconvertor_convert_to..."
QT_MOC_LITERAL(11, 298, 39), // "test_qhexconvertor_convert_to..."
QT_MOC_LITERAL(12, 338, 23), // "test_qhexconvertor_load"
QT_MOC_LITERAL(13, 362, 40), // "test_qhexconvertor_load_wrong..."
QT_MOC_LITERAL(14, 403, 28), // "test_qsqlitetablelist_set_DB"
QT_MOC_LITERAL(15, 432, 35), // "test_qsqlitetablelist_get_row..."
QT_MOC_LITERAL(16, 468, 33), // "test_qsqlitemodel_get_header_..."
QT_MOC_LITERAL(17, 502, 45) // "test_qsqlitemodel_get_header_..."

    },
    "test_sqlite_viewer\0initTestCase\0\0"
    "cleanupTestCase\0"
    "test_qhexconvertor_rawdatatable_interaction\0"
    "test_rawdatatable_headerData\0"
    "test_rawdatatable_headerData_bad_index\0"
    "test_rawdatatable_get_type\0"
    "test_rawdatatable_get_type_wrong_paramters\0"
    "test_rawdatatable_get_type_empty\0"
    "test_qhexconvertor_convert_to_hex\0"
    "test_qhexconvertor_convert_to_hex_empty\0"
    "test_qhexconvertor_load\0"
    "test_qhexconvertor_load_wrong_table_name\0"
    "test_qsqlitetablelist_set_DB\0"
    "test_qsqlitetablelist_get_row_count\0"
    "test_qsqlitemodel_get_header_data\0"
    "test_qsqlitemodel_get_header_data_wrong_index"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_test_sqlite_viewer[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      16,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,   94,    2, 0x08 /* Private */,
       3,    0,   95,    2, 0x08 /* Private */,
       4,    0,   96,    2, 0x08 /* Private */,
       5,    0,   97,    2, 0x08 /* Private */,
       6,    0,   98,    2, 0x08 /* Private */,
       7,    0,   99,    2, 0x08 /* Private */,
       8,    0,  100,    2, 0x08 /* Private */,
       9,    0,  101,    2, 0x08 /* Private */,
      10,    0,  102,    2, 0x08 /* Private */,
      11,    0,  103,    2, 0x08 /* Private */,
      12,    0,  104,    2, 0x08 /* Private */,
      13,    0,  105,    2, 0x08 /* Private */,
      14,    0,  106,    2, 0x08 /* Private */,
      15,    0,  107,    2, 0x08 /* Private */,
      16,    0,  108,    2, 0x08 /* Private */,
      17,    0,  109,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void test_sqlite_viewer::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<test_sqlite_viewer *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->test_qhexconvertor_rawdatatable_interaction(); break;
        case 3: _t->test_rawdatatable_headerData(); break;
        case 4: _t->test_rawdatatable_headerData_bad_index(); break;
        case 5: _t->test_rawdatatable_get_type(); break;
        case 6: _t->test_rawdatatable_get_type_wrong_paramters(); break;
        case 7: _t->test_rawdatatable_get_type_empty(); break;
        case 8: _t->test_qhexconvertor_convert_to_hex(); break;
        case 9: _t->test_qhexconvertor_convert_to_hex_empty(); break;
        case 10: _t->test_qhexconvertor_load(); break;
        case 11: _t->test_qhexconvertor_load_wrong_table_name(); break;
        case 12: _t->test_qsqlitetablelist_set_DB(); break;
        case 13: _t->test_qsqlitetablelist_get_row_count(); break;
        case 14: _t->test_qsqlitemodel_get_header_data(); break;
        case 15: _t->test_qsqlitemodel_get_header_data_wrong_index(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

QT_INIT_METAOBJECT const QMetaObject test_sqlite_viewer::staticMetaObject = { {
    &QObject::staticMetaObject,
    qt_meta_stringdata_test_sqlite_viewer.data,
    qt_meta_data_test_sqlite_viewer,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *test_sqlite_viewer::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *test_sqlite_viewer::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_test_sqlite_viewer.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int test_sqlite_viewer::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 16)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 16;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 16)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 16;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
